ftl.parser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  const OPERATOR_SYMBOLS = '!%&*+\-./:<=>?^|\u00D7\u00F7\u220F\u2211\u2215\u2217\u2219\u221A\u221B\u221C\u2227\u2228\u2229\u222A\u223C\u2264\u2265\u2282\u2283';

  // this is for building function / operator parameters
  var dummy_param_tuple = new ftl.TupleFn();

  // The following functions are used for parsing

  function join(value) {
    if (Array.isArray(value))
      return value.join("")
    return value
  }

  function extractOptional(optional, index) {
    return optional ? optional[index] : null;
  }

  function extractList(list, index) {
    var result = new Array(list.length);

    for (var i = 0; i < list.length; i++) {
      result[i] = list[i][index];
    }

    return result;
  }

  function buildList(first, rest, index) {
    return [first].concat(extractList(rest, index));
  }

  function optionalList(value) {
    if (value == null)
      throw new Error('catching null');
    return value !== null ? value : [];
  }

  function buildFirstRest(first, rest) {
    return (Array.isArray(rest) && rest.length == 0) ? first : buildList(first, rest, 1)
  }

  class FtlBuildError extends Error {
    constructor(... params) {
      super(... params);
      var start = this.stack.indexOf(' at new ') + 8;
      this.message = this.stack.substring(start, this.stack.indexOf(' ', start)) + ': ' + this.message;
    }
  }

  /**
   * Type for build only.
   */
  class FtlBuilder {

    constructor() {      
    }

    build() {
      return null;
    }
  }

  class FnWrapperBuilder extends FtlBuilder {
    constructor(fn) {
      super();
      this.fn = fn;
    }

    build(module, inputFn) {
      return this.fn;
    }
  }

  class ConstBuilder extends FtlBuilder {
    constructor(val) {
      super();
      this.val = val;
    }

    build(module, inputFn) {
      return new ftl.ConstFn(this.val);
    }
  }

  class RefBuilder extends FtlBuilder {
    constructor(name) {
      super();
      this.name = name;
    }

    build(module, inputFn) {
      if (this.name.startsWith('_') || inputFn instanceof ftl.TupleFn && inputFn.hasName(this.name))
        return new ftl.RefFn(this.name);

      var f = module.getAvailableFn(this.name);
      if (f)
        return buildFunctionCall(f, module, inputFn);

      let ret = new ftl.RefFn(this.name);
      ret.unresolved = true;
      return ret;
    }
  }

  class TupleElementBuilder extends FtlBuilder {
    constructor(id, expr) {
      super();
      this.id = id;
      this.expr = expr;
    }

    set isFunctionArg(val) {
      this.expr.isFunctionArg = val;
    }

    set seq(val) {
      this.expr.seq = val;
    }

    build(module, inputFn) {
      var iid = extractOptional(this.id, 0);
      if (iid != null)
        iid = iid.name;
      var expr = this.expr instanceof FtlBuilder ? this.expr.build(module, inputFn) : this.expr;
      return iid == null ? expr : new ftl.NamedExprFn(iid, expr);
    }
  }

  class FunctionInterfaceBuilder extends FtlBuilder {
    constructor(name, params, seq = 0) {
      super();
      this.name = name;
      this.params = params;
      this.seq = seq;
    }

    build(module, inputFn) {
      if (this.name.endsWith('$') && this.name.length > 1) {
        this.name = this.name.substr(0, this.name.length - 1);
      }

      return new ftl.FunctionInterfaceFn(this.name, this.params.build(module, inputFn), this.seq);
    }
  }

  /**
   * This class captures n-ary operator expression. It is transient during parsing and building.
   */
  class N_aryOperatorExpressionBuilder extends FtlBuilder {
    constructor(ops, operands) {

      super();
      this.ops = ops;
      this.operands = operands;
    }

    build(module, inputFn) {
      ftl.FnValidator.assertNonEmptyArray(this.ops);

      var current_index = 0;
      var stop_index = this.ops.length;

      // This is used to parse operators and operands recursively.
      // It is called from index = length of operators down to 1.
      function parse_operators(ops, operands, index, full) {

        // operand at index 1 is for operator at 
        var op = index == 1 ? ops[0] : ops.slice(0, index).join(' ')
        var f = module.getAvailableFn(op);

        // no corresponding function found for single op
        if (!f) {
          if (index == 1)
            throw new FtlBuildError("No function with name '" + op + "' found!");

          index--;
          var reduced = parse_operators(ops, operands, index, false);
          
          if (current_index == stop_index)
            return reduced;

          ops = ops.slice(index, ops.length)
          operands = [reduced].concat(operands.slice(index + 1, operands.length))
          return parse_operators(ops, operands, ops.length, true)
        }

        for (var i = 0; i < f.params.fns.length; i++) {
          var fn = f.params.fns[i];
          if (fn.wrapped instanceof ftl.FunctionInterfaceFn) {
            //fnode.wrapped.isNative = f instanceof ftl.NativeFunctionFn;
            console.debug(inputFn);

            // build the ExprRefFn wrapped element outside ExprRefFn itself
            // this is because inputFn is available here
            operands[i] = new FnWrapperBuilder(new ftl.ExprRefFn(fn.wrapped, operands[i].build(module, inputFn)));
          }
        }

        current_index += index;
        var operands_tuple = new TupleBuilder(... operands.slice(0, f.params.fns.length));

        return new PipeBuilder(operands_tuple, f);
      }

      return parse_operators(this.ops, this.operands, this.ops.length, true).build(module, dummy_param_tuple);
    }
  }

  /**
   * Builds a TupleFn.
   * 
   * If elms is empty, it builds an empty TupleFn.
   */
  class TupleBuilder extends FtlBuilder {
    
    constructor(... fns) {
      super();
      this.fns = fns;
    }

    // Checks duplicates of names.
    build(module, inputFn) {
      ftl.FnValidator.assertElmsTypes(this.fns, FtlBuilder, ftl.Fn);

      return new ftl.TupleFn(... this.fns.map(fn => fn instanceof FtlBuilder && fn.build(module, inputFn) || fn));
    }
  }

  class PipeBuilder extends FtlBuilder {
    constructor(... elements) {
      super();
      this.elements = elements;
    }

    build(module, inputFn) {
      ftl.FnValidator.assertElmsTypes(this.elements, ftl.Fn, FtlBuilder);
      var prev = inputFn;
      var fns = [];
      for (var i = 0; i < this.elements.length; i++) {
        fns.push(this.elements[i] instanceof ftl.Fn && this.elements[i] || this.elements[i].build(module, prev));

        // pure single ref, replace with (NamedExprFn(name, ...))
        if (fns[i] instanceof ftl.RefFn && !fns[i].name.startsWith('_')) {

          var ref = (inputFn == null || inputFn == undefined || !(inputFn instanceof ftl.TupleFn || (inputFn instanceof ftl.TupleFn && !inputFn.hasName(fns[i].name)))) ?
            new TupleSelectorFn(0) : fns[i];
            fns[i] = new ftl.TupleFn(new ftl.NamedExprFn(fns[i].name, ref));
        }
        prev = fns[i];
      }

      // expands contained PipeFn elements which may be before or after build
      for (var i = fns.length; i >= 0; i--)
        if (fns[i] instanceof ftl.PipeFn)
          fns.splice(i, 1, ... fns[i].fns);

      return new ftl.PipeFn(... fns);
    }
  }

  /**
   * Builds tuple for parameters.
   * 
   * Function parameters are different from tuple where any non-named element is treated as a name.
   */
  class ParamTupleBuilder extends TupleBuilder {
    constructor(... params) {
      super(... params);
    }

    build(module, inputFn) {
      for (var i = 0; i < this.fns.length; i++) {
        let fn = this.fns[i];
        fn.isFunctionArg = true;
        fn.seq = i;
      }

      let fns = this.fns.map(fn => fn instanceof FtlBuilder && fn.build(module, inputFn) || fn);

      ftl.FnValidator.assertElmsTypes(fns, ftl.RefFn, ftl.NamedExprFn, ftl.FunctionInterfaceFn, ftl.CallExprFn);

      var default_count = 0;
      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // param with default value
        if (fn instanceof ftl.NamedExprFn) {
          default_count++;
          fns[i] = new ftl.NamedExprFn(fn.name, new ftl.SeqSelectorOrDefault(i, fn.wrapped));
        }

        // position param
        else {
          if (default_count > 0)
            throw new FtlBuildError("FTL0002: Position parameter at index " + i + " is after parameter with default value!");

          // simple param
          if (fn instanceof ftl.RefFn)
            fns[i] = new ftl.NamedExprFn(fn.name, new ftl.TupleSelectorFn(i));

          else if (fn instanceof ftl.CallExprFn) {
            fn = new ftl.FunctionInterfaceFn(fn.name, fn.params[0])
            fn.seq = i;
            fns[i] = new ftl.NamedExprFn(fn.name, fn);            
          }

          // function param
          else if (fn instanceof ftl.FunctionInterfaceFn) {
            fns[i] = new ftl.NamedExprFn(fn.name, fn);            
          }

          else
            throw new FtlBuildError("FTL0003: Element at index " + i + " is not a qualified parameter!");
        }
      }

      // The following is for existanceof input.
      // This happens for anonymous inline functions.
      return new ftl.TupleFn(... fns);
    }
  }

  class ExprCurryBuilder extends FtlBuilder {
    constructor(f, ... paramtuples) {
      super();
      this.f = f;
      this.paramtuples = paramtuples;
    }

    build(module, inputFn) {
      ftl.FnValidator.assertElmType(this.f, FtlBuilder);
      ftl.FnValidator.assertElmsTypes(this.paramtuples, FtlBuilder);

      return new ftl.ExprFn(this.f.build(module, inputFn), ... this.paramtuples.map(
        paramtuple => paramtuple.build(module, inputFn)
      ));
    }
  }

  class CallExprBuilder extends FtlBuilder {
    constructor(name, params) {
      super();
      this.name = name;
      this.params = params;

      // tells if the call expression is part of function arguments
      this.isFunctionArg = false;
      this.seq = 0;
    }

    combine(... tuples) {
      function split(tuple) {
        for (var i = 0; i < tuple.size; i++) {
          if (tuple.fns[i] instanceof ftl.NamedExprFn)
            return [tuple.fns.slice(0, i), tuple.fns.slice(i)];
        }
        return [tuple.fns, []];
      }

      if (tuples.length == 1)
        return tuples[0];

      var pos_elms = [];
      var name_elms = new Map();
      tuples.forEach(tuple => {
        var sections = split(tuple);
        pos_elms.push(... sections[0]);
        sections[1].forEach(function(name_elm) {
          name_elms.set(name_elm.name, name_elm);
        })
      });

      return new ftl.TupleFn(... pos_elms, ... name_elms.values());
    }

    combineMultiTuples(paramsArray) {
      if (paramsArray.length == 1)
        return paramsArray[0];

      let posParams = [];
      let namedParams = [];
      paramsArray.forEach(params => {
        if (params.fns.length == 0) {
          throw new Error('Redundent curry with no arguments!');
        }

        params.fns.forEach(param => {
          if (param instanceof ftl.NamedExprFn)
            namedParams.push(param);
          else
            posParams.push(param);
        })
      })

      return new TupleBuilder(... posParams.concat(namedParams)).build();
    }

    build(module, inputFn) {
      if (inputFn instanceof ftl.TupleFn && inputFn.hasName(this.name)) {
        for (var i = 0; i < this.fns.length; i++)
          this.fns[i] = this.fns[i].build(module, inputFn);
        return this;
      }

      // calling expression is a function invocation
      else if (module.hasFn(this.name)) {
        var f = module.getAvailableFn(this.name);
        if (f) {
          let params = this.combineMultiTuples(this.params.map(p => p.build(module, inputFn)));
          let f_params = f.params.fns;

          let params_len = f_params.length;

          if (params_len > 0 && params.fns.length == 0)
            throw new Error(`Calling ${f.name} with no argument provided! For currying, provide at least one argument.`);

          //var input = (inputFn instanceof ftl.TupleFn) ? inputFn : new ftl.TupleFn(inputFn);
          //var combined = this.combine(... params.fns, input);
          var combined = params;
          //for (var i = 0; i < params_len; i++)
          //  if (f_params[i].wrapped && f_params[i].wrapped instanceof ftl.FunctionInterfaceFn)
          //    combined.fns[i] = new ftl.ExprRefFn(f_params[i].wrapped, combined.fns[i]);

          // TODO combine following two parts
          let built = buildFunctionCall(f, module, combined);
          if (built == f)
            return new ftl.PipeFn(combined, f);
          else
            return built;

          var curry_params_len = this.fns[0].size;
          var ret = null;
          if (curry_params_len >= params_len)
            ret = new ftl.PipeFn(this.fns[0], f);
          else if (inputFn instanceof TupleFn && inputFn.size + curry_params_len.size >= params_len) {
            new ftl.TupleFn(... inputFn.slice(0, params_len - this.fns[0].size))
            var extra = ftl.NativeFunctionFn.validateInput(inputFn, this.fns[0]);

            ret = new ftl.PipeFn(new ftl.TupleFn(... inputFn.slice(0, params_len - this.fns[0].size), ... this.fns[0].fns), f);
          }
          else if (!(inputFn instanceof TupleFn) && this.fns[0].size + 1 >= params_len)
            ret = new ftl.PipeFn(new ftl.TupleFn(inputFn, ... this.fns[0].fns), f);
          else
            throw new Error("calling arguments to " + f + " does not match argument number!"); 

          return ret.build(module, inputFn);
        }
      }

      else if (this.isFunctionArg)
        return new FunctionInterfaceBuilder(this.name, this.params[0], this.seq).build(module, inputFn);

      throw new Error(this.name + " can not be resolved.");
    }
  }

  class FunctionBuilder extends FtlBuilder {
    constructor(id, params, body) {
      super();
      this.id = id;
      this.params = params;
      this.body = body;
    }

    build(module, inputFn) {
      if (this.id instanceof ftl.RefFn && this.body instanceof ftl.RefFn && params == null) {
        throw new Error("Error on a function declaration with '" + id.name + "' and '" + body.name + "'. Are you overriding -> ?");
      }

      var is_operator = this.id.type == 'OperatorDeclaration' || this.id.type == 'PostfixOperatorDeclaration';
      if (is_operator)
        console.log('parameter list for operator: ', this.id.operands);
      else
        console.log('parameter list for function: ', optionalList(this.params));

      var param_list = is_operator ? this.id.operands : optionalList(this.params);
      param_list = Array.isArray(param_list) ? param_list : param_list instanceof TupleBuilder ? param_list.fns : [param_list];

      // @TODO will never be called
      for (var i = 0; i < param_list.length; i++)
        if (param_list[i] instanceof ftl.CallExprFn) {
          param_list[i] = new ftl.FunctionInterfaceFn(param_list[i].name, param_list[i].params[0]);
        }

      console.log('parameter list: ', param_list)
      param_list = new ParamTupleBuilder(... param_list).build(module, new ftl.TupleFn());
      var name = this.id.name || this.id;

      // prefix operator
      if (!is_operator && this.isOperator(name)) {
        name = ' ' + name;
      }

      if (this.body.script) {
        return this.buildNativeFunction(module, name, param_list, this.body.script);
      }
      else {
        var f_body = new PipeBuilder(param_list, this.body).build(module, new ftl.TupleFn());
        var f_params = f_body.fns[0];
        let ret = new ftl.FunctionFn(name, f_params, f_body);

        this.resolveRecursiveRef(ret, f_body);
        return ret;
      }
    }

    resolveRecursiveRef(f, expr) {

      if (expr instanceof ftl.PipeFn || expr instanceof ftl.TupleFn) {
        for (let i = 0; i < expr.fns.length; i++) {
          let e = expr.fns[i];
          if (e.name == f.name && e instanceof ftl.RefFn && e.unresolved) {
              expr.fns[i] = f;
          } else
            this.resolveRecursiveRef(f, e);
        }
      }
      else if (expr instanceof ftl.WrapperFn) {
        let e = expr.wrapped;
        if (e.name == f.name && e instanceof ftl.RefFn && e.unresolved) {
          expr.wrapped = f;
        }
        else {
          this.resolveRecursiveRef(f, e);
        }
      }
    }

    isOperator(name, params) {
      return OPERATOR_SYMBOLS.includes(name[0]);
    }

    buildNativeFunction(module, name, params, script) {
      if (params instanceof FtlBuilder)
        params = params.build(module, new ftl.TupleFn(), true);

      if (typeof this.script != 'function') {
        var param_list = [];
        if (params != null) {
          for (var i = 0; i < params.fns.length; i++) {
            var param = params.fns[i];

            // TODO what is the case for param as string
            if (typeof param == 'string')
              param_list.push(param)
            else
              param_list.push(param.name);
          }
        }

        script = eval("(function(" + param_list.join(',') + ")" + script + ")");
      }      

      return new ftl.NativeFunctionFn(name, params, script);
    }
  }

  /**
   * This is a post build with both f and inputFn built already.
   * @param {*} f 
   * @param {*} module 
   * @param {*} inputFn 
   */
  function buildFunctionCall(f, module, inputFn) {

    // tuple to a function has to satisfy argument spec:
    // named arguments has to be after position params.
    function validateInput(args, params, minSize) {
      var names = new Set();
      var pos_sz = 0;

      // validate sequence of position and named args
      for (var i = 0; i < args.size; i++) {
        if (args.fns[i] instanceof ftl.NamedExprFn) {
          names.add(args.fns[i].name);
        } else if (names.size > 0) {
          throw new Error("Position argument at index " + i + " after named argument!");
        } else
          pos_sz = i + 1;
      }

      // no named args and has enough positioned args
      if (names.size == 0 && args.size >= minSize)
        return null;

      var need_new_args = false;
      var new_args = new Array(params.size);
      for (var i = 0; i < params.size; i++) {
        var name = params.fns[i].name;

        // position arg
        if (i < pos_sz) {
          if (names.has(name)) {
            throw new Error("Parameter " + name + " is provided with both position and named argument!");
          }

          new_args[i] = args.fns[i];
        }

        // named param and no corresponding arg
        else if (!names.has(name)) {
          new_args[i] = params.fns[i];
          need_new_args = true;
        }

       // named param matched with same named arg
        else if (i < args.size && args.fns[i].name == name) {
          new_args[i] = args.fns[i];
        }

        else {
          new_args[i] = args.getNamedFn(name);
          need_new_args = true;
        }
      }

      return need_new_args ? new ftl.TupleFn(... new_args) : null;
    }

    console.log(f);
    if (!(inputFn instanceof ftl.TupleFn))
      inputFn = new ftl.TupleFn(inputFn);

    var min_param_sz = f.params.size;
    for (var i = 0; i < f.params.size; i++)

      // functional
      if (f.params.fns[i].wrapped instanceof ftl.FunctionInterfaceFn) {
        inputFn.fns[i] = new ftl.FunctionalFn(inputFn.fns[i]);
      }
      else if (f.params.fns[i].wrapped instanceof ftl.SeqSelectorOrDefault) {
        min_param_sz = i;
        break;
      }

    var new_tuple = validateInput(inputFn, f.params, min_param_sz);
    return new_tuple ? new ftl.PipeFn(new_tuple, f) : f;
  }

  class ArrayElementSelectorBuilder extends FtlBuilder {
    constructor(name, index) {
      super();
      this.name = name.name;
      this.index = index;
    }

    build(module, inputFn) {
      var index = (this.index instanceof ftl.RefFn) ? this.index.name : parseInt(this.index);
      return new ftl.ArrayElementSelectorFn(this.name, index);
    }
  }


  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(program) {

              //# Start

              return program;
            },
          function() { return text() },
          function(module_name) {

              //# ModuleDeclaration

              console.log("module name: '" + module_name + "'");
              module.name = module_name;
            },
          ".",
          peg$literalExpectation(".", false),
          function() {

              //# ModulePath

              return text();
            },
          function(first, rest) {

              //# Declarations

              return buildList(first, rest, 1);
            },
          function(importItems) {

              //# ImportDeclaration

              console.log(importItems);
              module.importStatement(null, importItems)
            },
          " ",
          peg$literalExpectation(" ", false),
          "as",
          peg$literalExpectation("as", false),
          function(name, as) {

              //# ImportSingleItem

              return {
                type: "single",
                name: name,
                asName: extractOptional(as, 3)
              };
            },
          ",",
          peg$literalExpectation(",", false),
          function(first, rest) {

              //# ImportMultiItems

              var ret = extractList(rest, 3);
              ret.unshift(first);
              return ret;
            },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(path, list) {

              //# ImportList

              return {
                type: "list",
                path: path,
                importList: list
              }
            },
          "=",
          peg$literalExpectation("=", false),
          function(modifier, id, expr) {

              //# VariableDeclaration
              var ret = modifier =='const' ? new ftl.ImmutableValFn(id.name, expr) : new ftl.VarFn(id.name, expr)
              module.addFn(ret); 
              return ret
            },
          function(id, params, body) {

              //# FunctionDeclaration

              module.addFn(new FunctionBuilder(id, params, body).build(module, new ftl.TupleFn()));
            },
          "(",
          peg$literalExpectation("(", false),
          ")",
          peg$literalExpectation(")", false),
          function(elms) { return elms == null ? new TupleBuilder() : new TupleBuilder(... elms) },
          function(expr, params) {

              //# ExpressionCurry

              return new ExprCurryBuilder(expr, ... extractList(params, 1))
            },
          function(first, rest) {

              //# ParameterList
              console.log("first", first);console.log("rest", rest);
              console.log("param list:", buildList(first, rest, 3));
              var list = buildList(first, rest, 3);
              for (var i = 0; i < list.length; i++) {
                if (list[i] instanceof ftl.RefFn) {
                  list[i].tupleSeq = '_' + i;
                }
              }
              return list;
             },
          ":",
          peg$literalExpectation(":", false),
          function(id, expr) {

              //# Parameter
              return new TupleElementBuilder(id, expr);
          },
          "->",
          peg$literalExpectation("->", false),
          function(ex) {

              //# PipeExpression

              return ex
            },
          function(first, rest) {

              //# Expression

              console.log("first is ", first)
              var t = extractOptional(rest, 1);
              if (rest)
                console.log("rest is ", t)
              if (t == null)
                return first;
              
              return new PipeBuilder(first, t);
            },
          function(expr) {

                //# Executable

                let exec = expr.build(module);
                module.addExecutable(exec);
                return exec;
              },
          "//",
          peg$literalExpectation("//", false),
          function(first, rest) {

              //# Operator

              return text();
            },
          function(id) {

              //# OperandValueDeclaration

              return id;
            },
          function(id, params) {

              // #OperandFunctionDeclaration
              return new FunctionInterfaceBuilder(id.name, new ParamTupleBuilder(... params.fns));
            },
          function(first, rest) {

              //# PreInfixOperatorDeclaration

              var ops = extractList(rest, 1);
              var name = ops.length == 1 ? ops[0] : ops.join(' ');
              console.log("operators in operator declaration:", ops)
              var operands = [first].concat(extractList(rest, 3))
              console.log("operands in operator declaration:", operands)
              return {
                type: 'OperatorDeclaration',
                name: name,
                operands: new TupleBuilder(... operands)
              }
            },
          function(operand, op) {

              //# PostfixOperatorDeclaration

              console.log('PostfixOperatorDeclaration begin')
              return {
                type: 'PostfixOperatorDeclaration',
                name: op,
                operands: operand
              }
            },
          function(op, expr) {

              //# UnaryOperatorExpression

              // negative number
              if (op == '-' && expr instanceof ConstBuilder)
                return new ConstBuilder(-expr.val);

              return new PipeBuilder(expr, module.getAvailableFn(' ' + (op.name || op)));
            },
          function(expr, op) {

              //# PostfixOperatorExpression

              console.debug('PostfixOperatorExpression: op', op)
              console.debug('PostfixOperatorExpression: expr', expr)
              return new PipeBuilder(expr, module.getAvailableFn(op) || new RefBuilder(op));
            },
          function(operand, rest) {

              // N_aryOperatorExpression

              var ops = extractList(rest, 1);
              var params = [operand].concat(extractList(rest, 3));
              return new N_aryOperatorExpressionBuilder(ops, params)      
            },
          "_",
          peg$literalExpectation("_", false),
          "0",
          peg$literalExpectation("0", false),
          function() {

              //# TupleSelector

              return new ftl.TupleSelectorFn(text().substring(1));
            },
          function(id) {return text()},
          function(id, index) {

              //# ArrayElementSelector
              return new ArrayElementSelectorBuilder(id, index);
            },
          function(elms) {

              //# ArrayLiteral

              var lst = extractOptional(elms, 1);
              return lst == null ? new ConstBuilder([]) : lst
            },
          function(first, rest) {

              //# LiteralList

              var elms = buildList(first, rest, 3);
              var ret = [];
              for (var i = 0; i < elms.length; i++)
                ret.push(elms[i].build(module).apply());
              return new ConstBuilder(ret)
            },
          function(id, params) {

              //# CallExpression

              var extracted_params = extractList(params, 1);

              // lambda declaration
              if (id.name == '$') {
                if (extracted_params.length > 1)
                  throw new Error("FTL0001: lambda's arguments followed by calling arguments!");
                return new ParamTupleBuilder(... extracted_params[0].fns)
              }

              return new CallExprBuilder(id.name, extracted_params);
            },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function() {return text()},
          function() {return {type:'native', script: text()}},
          peg$anyExpectation(),
          function(name) {

              //# Identifier

              var ret = new RefBuilder(name);
              return ret;
            },
          peg$otherExpectation("identifier"),
          function(first, rest) {

              //# IdentifierName

              return first + rest.join("");
            },
          "$",
          peg$literalExpectation("$", false),
          function() {

              //# NamespaceIdentifier
              return text();
            },
          "false",
          peg$literalExpectation("false", false),
          "fn",
          peg$literalExpectation("fn", false),
          "null",
          peg$literalExpectation("null", false),
          "true",
          peg$literalExpectation("true", false),
          "module",
          peg$literalExpectation("module", false),
          "import",
          peg$literalExpectation("import", false),
          "var",
          peg$literalExpectation("var", false),
          "const",
          peg$literalExpectation("const", false),
          /^[A-Z]/,
          peg$classExpectation([["A", "Z"]], false, false),
          /^[a-z]/,
          peg$classExpectation([["a", "z"]], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          /^[!%&*+\-.\/:<=>?\^|\xD7\xF7\u220F\u2211\u2215\u2217\u2219\u221A\u221B\u221C\u2227\u2228\u2229\u222A\u223C\u2264\u2265\u2282\u2283]/,
          peg$classExpectation(["!", "%", "&", "*", "+", "-", ".", "/", ":", "<", "=", ">", "?", "^", "|", "\xD7", "\xF7", "\u220F", "\u2211", "\u2215", "\u2217", "\u2219", "\u221A", "\u221B", "\u221C", "\u2227", "\u2228", "\u2229", "\u222A", "\u223C", "\u2264", "\u2265", "\u2282", "\u2283"], false, false),
          function() { return new ConstBuilder(true) },
          function() { return new ConstBuilder(false) },
          function(literal) { return literal },
          function() {
                return new ConstBuilder(parseFloat(text()));
              },
          /^[\-]/,
          peg$classExpectation(["-"], false, false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          "e",
          peg$literalExpectation("e", true),
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          "0x",
          peg$literalExpectation("0x", true),
          /^[0-9a-f]/i,
          peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
          "\"",
          peg$literalExpectation("\"", false),
          function(chars) { var str = text(); return new ConstBuilder(str.substr(1, str.length - 2)) },
          "'",
          peg$literalExpectation("'", false),
          "\\",
          peg$literalExpectation("\\", false),
          "b",
          peg$literalExpectation("b", false),
          "f",
          peg$literalExpectation("f", false),
          "n",
          peg$literalExpectation("n", false),
          "r",
          peg$literalExpectation("r", false),
          "t",
          peg$literalExpectation("t", false),
          "v",
          peg$literalExpectation("v", false),
          "x",
          peg$literalExpectation("x", false),
          "u",
          peg$literalExpectation("u", false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "\n",
          peg$literalExpectation("\n", false),
          "\r\n",
          peg$literalExpectation("\r\n", false),
          "\r",
          peg$literalExpectation("\r", false),
          "\t",
          peg$literalExpectation("\t", false),
          "\x0B",
          peg$literalExpectation("\x0B", false),
          "\f",
          peg$literalExpectation("\f", false),
          "\xA0",
          peg$literalExpectation("\xA0", false),
          peg$otherExpectation("comment"),
          "/*",
          peg$literalExpectation("/*", false),
          "*/",
          peg$literalExpectation("*/", false)
        ],

        peg$bytecode = [
          peg$decode("%;y/V#;!.\" &\"/H$;y/?$;#.\" &\"/1$;y/($8%: %!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;R/Q#;w/H$%;\"/0#;M/'$8\":!\" )(\"'#&'#/($8#:\"#! )(#'#(\"'#&'#"),
          peg$decode("%$%;M/2#2#\"\"6#7$/#$+\")(\"'#&'#0<*%;M/2#2#\"\"6#7$/#$+\")(\"'#&'#&/& 8!:%! )"),
          peg$decode("%;$/_#$%;x/,#;$/#$+\")(\"'#&'#06*%;x/,#;$/#$+\")(\"'#&'#&/)$8\":&\"\"! )(\"'#&'#"),
          peg$decode(";%./ &;*.) &;+.# &;3"),
          peg$decode("%;S/:#;w/1$;'/($8#:'#! )(#'#(\"'#&'#"),
          peg$decode("%%;\"/\x82#;I.o &%;5/e#$%2(\"\"6(7)/,#;5/#$+\")(\"'#&'#0<*%2(\"\"6(7)/,#;5/#$+\")(\"'#&'#&/#$+\")(\"'#&'#/'$8\":!\" )(\"'#&'#/h#%;w/J#2*\"\"6*7+/;$;w/2$;I.# &;5/#$+$)($'#(#'#(\"'#&'#.\" &\"/)$8\":,\"\"! )(\"'#&'#"),
          peg$decode("%;)/\x8F#$%;w/D#2-\"\"6-7./5$;w/,$;)/#$+$)($'#(#'#(\"'#&'#0N*%;w/D#2-\"\"6-7./5$;w/,$;)/#$+$)($'#(#'#(\"'#&'#&/)$8\":/\"\"! )(\"'#&'#"),
          peg$decode("%%;\"/0#;M/'$8\":!\" )(\"'#&'#/p#;w/g$20\"\"6071/X$;w/O$;'.\" &\"/A$;w/8$22\"\"6273/)$8':4'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";(.# &;&"),
          peg$decode("%;U.# &;T/f#;w/]$;I/T$;w/K$25\"\"6576/<$;w/3$;4/*$8':7'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;O/q#;w/h$;9.) &;I.# &;5/S$;w/J$;,.\" &\"/<$;w/3$;0/*$8':8'#$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%29\"\"697:/N#;w/E$;..\" &\"/7$2;\"\"6;7</($8$:=$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;,/e#$%;w/,#;,/#$+\")(\"'#&'#/9#06*%;w/,#;,/#$+\")(\"'#&'#&&&#/)$8\":>\"\"! )(\"'#&'#"),
          peg$decode("%;//\x8F#$%;w/D#2-\"\"6-7./5$;w/,$;//#$+$)($'#(#'#(\"'#&'#0N*%;w/D#2-\"\"6-7./5$;w/,$;//#$+$)($'#(#'#(\"'#&'#&/)$8\":?\"\"! )(\"'#&'#"),
          peg$decode("%%;I/;#;w/2$2@\"\"6@7A/#$+#)(#'#(\"'#&'#.\" &\"/;#;w/2$;2/)$8#:B#\"\" )(#'#(\"'#&'#"),
          peg$decode(";G.# &;1"),
          peg$decode("%2C\"\"6C7D/C#;w/:$;2/1$;w/($8$:E$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;<.# &;4/J#%;w/,#;1/#$+\")(\"'#&'#.\" &\"/)$8\":F\"\"! )(\"'#&'#"),
          peg$decode("%;2/' 8!:G!! )"),
          peg$decode(";A.M &;F.G &;E.A &;I.; &;B.5 &;C./ &;-.) &;,.# &;@"),
          peg$decode("%%<2H\"\"6H7I=.##&&!&'#/]#%<2C\"\"6C7D=.##&&!&'#/B$;Z/9$$;Z0#*;Z&/)$8$:J$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;I/' 8!:K!! )"),
          peg$decode("%;I/2#;,/)$8\":L\"\"! )(\"'#&'#"),
          peg$decode(";7.# &;6"),
          peg$decode(";:.# &;;"),
          peg$decode("%;8/\x89#$%;w/>#;5/5$;w/,$;8/#$+$)($'#(#'#(\"'#&'#/K#0H*%;w/>#;5/5$;w/,$;8/#$+$)($'#(#'#(\"'#&'#&&&#/)$8\":M\"\"! )(\"'#&'#"),
          peg$decode("%;8/;#;w/2$;5/)$8#:N#\"\" )(#'#(\"'#&'#"),
          peg$decode(";=.) &;?.# &;>"),
          peg$decode("%;5/;#;w/2$;4/)$8#:O#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;4/;#;w/2$;5/)$8#:P#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;4/\x89#$%;w/>#;5/5$;w/,$;4/#$+$)($'#(#'#(\"'#&'#/K#0H*%;w/>#;5/5$;w/,$;4/#$+$)($'#(#'#(\"'#&'#&&&#/)$8\":Q\"\"! )(\"'#&'#"),
          peg$decode("%2R\"\"6R7S/k#2T\"\"6T7U.R &%;`/H#$;Y0#*;Y&/8$%<;K=.##&&!&'#/#$+#)(#'#(\"'#&'#/'$8\":V\" )(\"'#&'#"),
          peg$decode("%;I/\x93#;w/\x8A$20\"\"6071/{$2T\"\"6T7U.H &%;`/8#$;Y0#*;Y&/($8\":W\"!%)(\"'#&'#.# &;I/A$;w/8$22\"\"6273/)$8&:X&\"%\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";P./ &;\\.) &;].# &;f"),
          peg$decode("%20\"\"6071/a#%;w/,#;D/#$+\")(\"'#&'#.\" &\"/@$;w/7$22\"\"6273/($8$:Y$!\")($'#(#'#(\"'#&'#"),
          peg$decode("%;4/\x8F#$%;w/D#2-\"\"6-7./5$;w/,$;4/#$+$)($'#(#'#(\"'#&'#0N*%;w/D#2-\"\"6-7./5$;w/,$;4/#$+$)($'#(#'#(\"'#&'#&/)$8\":Z\"\"! )(\"'#&'#"),
          peg$decode("%;I/r#;w/i$20\"\"6071/Z$;w/Q$$;./&#0#*;.&&&#/;$;w/2$22\"\"6273/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;I/e#$%;w/,#;,/#$+\")(\"'#&'#/9#06*%;w/,#;,/#$+\")(\"'#&'#&&&#/)$8\":[\"\"! )(\"'#&'#"),
          peg$decode("%2\\\"\"6\\7]/\u0152#;w/\u0149$%$%%<2\\\"\"6\\7].) &2^\"\"6^7_=.##&&!&'#/,#;H/#$+\")(\"'#&'#0T*%%<2\\\"\"6\\7].) &2^\"\"6^7_=.##&&!&'#/,#;H/#$+\")(\"'#&'#&/& 8!:`! )/\xCC$$;G0#*;G&/\xBC$;w/\xB3$%$%%<2\\\"\"6\\7].) &2^\"\"6^7_=.##&&!&'#/,#;H/#$+\")(\"'#&'#0T*%%<2\\\"\"6\\7].) &2^\"\"6^7_=.##&&!&'#/,#;H/#$+\")(\"'#&'#&/& 8!:`! )/6$2^\"\"6^7_/'$8':a' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("1\"\"5!7b"),
          peg$decode("%%<;[=.##&&!&'#/1#;J/($8\":c\"! )(\"'#&'#"),
          peg$decode("<%;K/9#$;L0#*;L&/)$8\":e\"\"! )(\"'#&'#=.\" 7d"),
          peg$decode(";V.5 &2f\"\"6f7g.) &2R\"\"6R7S"),
          peg$decode(";K.# &;Y"),
          peg$decode("%;X/O#$;X.) &2R\"\"6R7S0/*;X.) &2R\"\"6R7S&/'$8\":h\" )(\"'#&'#"),
          peg$decode("%2i\"\"6i7j/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2k\"\"6k7l/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2m\"\"6m7n/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2o\"\"6o7p/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2q\"\"6q7r/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2s\"\"6s7t/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2u\"\"6u7v/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2w\"\"6w7x/8#%<;L=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";W.# &;X"),
          peg$decode("4y\"\"5!7z"),
          peg$decode("4{\"\"5!7|"),
          peg$decode("4}\"\"5!7~"),
          peg$decode("4\x7F\"\"5!7\x80"),
          peg$decode(";T.A &;U.; &;O.5 &;R./ &;S.) &;P.# &;\\"),
          peg$decode("%;Q/& 8!:\x81! ).. &%;N/& 8!:\x82! )"),
          peg$decode("%;d/>#%<;K.# &;Y=.##&&!&'#/#$+\")(\"'#&'#.M &%;^/C#%<;K.# &;Y=.##&&!&'#/($8\":\x83\"!!)(\"'#&'#"),
          peg$decode("%;_/T#2#\"\"6#7$/E$$;Y0#*;Y&/5$;a.\" &\"/'$8$:\x84$ )($'#(#'#(\"'#&'#.\x91 &%4\x85\"\"5!7\x86.\" &\"/Z#2#\"\"6#7$/K$$;Y/&#0#*;Y&&&#/5$;a.\" &\"/'$8$:\x84$ )($'#(#'#(\"'#&'#.? &%;_/5#;a.\" &\"/'$8\":\x84\" )(\"'#&'#"),
          peg$decode("2T\"\"6T7U.Q &%4\x85\"\"5!7\x86.\" &\"/<#;`/3$$;Y0#*;Y&/#$+#)(#'#(\"'#&'#"),
          peg$decode("4\x87\"\"5!7\x88"),
          peg$decode("%;b/,#;c/#$+\")(\"'#&'#"),
          peg$decode("3\x89\"\"5!7\x8A"),
          peg$decode("%4\x8B\"\"5!7\x8C.\" &\"/9#$;Y/&#0#*;Y&&&#/#$+\")(\"'#&'#"),
          peg$decode("%3\x8D\"\"5\"7\x8E/@#%$;e/&#0#*;e&&&#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\x8F\"\"5!7\x90"),
          peg$decode("%2\x91\"\"6\x917\x92/G#$;g0#*;g&/7$2\x91\"\"6\x917\x92/($8#:\x93#!!)(#'#(\"'#&'#.W &%2\x94\"\"6\x947\x95/G#$;h0#*;h&/7$2\x94\"\"6\x947\x95/($8#:\x93#!!)(#'#(\"'#&'#"),
          peg$decode("%%<2\x91\"\"6\x917\x92./ &2\x96\"\"6\x967\x97.# &;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#.B &%2\x96\"\"6\x967\x97/,#;j/#$+\")(\"'#&'#.# &;i"),
          peg$decode("%%<2\x94\"\"6\x947\x95./ &2\x96\"\"6\x967\x97.# &;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#.B &%2\x96\"\"6\x967\x97/,#;j/#$+\")(\"'#&'#.# &;i"),
          peg$decode("%2\x96\"\"6\x967\x97/,#;q/#$+\")(\"'#&'#"),
          peg$decode(";k.N &%2T\"\"6T7U/8#%<;Y=.##&&!&'#/#$+\")(\"'#&'#.# &;o"),
          peg$decode(";l.# &;m"),
          peg$decode("2\x94\"\"6\x947\x95.} &2\x91\"\"6\x917\x92.q &2\x96\"\"6\x967\x97.e &2\x98\"\"6\x987\x99.Y &2\x9A\"\"6\x9A7\x9B.M &2\x9C\"\"6\x9C7\x9D.A &2\x9E\"\"6\x9E7\x9F.5 &2\xA0\"\"6\xA07\xA1.) &2\xA2\"\"6\xA27\xA3"),
          peg$decode("%%<;n.# &;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#"),
          peg$decode(";l.; &;Y.5 &2\xA4\"\"6\xA47\xA5.) &2\xA6\"\"6\xA67\xA7"),
          peg$decode("%2\xA4\"\"6\xA47\xA5/F#%%;e/,#;e/#$+\")(\"'#&'#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\xA8\"\"5!7\xA9"),
          peg$decode("2\xAA\"\"6\xAA7\xAB.5 &2\xAC\"\"6\xAC7\xAD.) &2\xAE\"\"6\xAE7\xAF"),
          peg$decode("2\xB0\"\"6\xB07\xB1.M &2\xB2\"\"6\xB27\xB3.A &2\xB4\"\"6\xB47\xB5.5 &2(\"\"6(7).) &2\xB6\"\"6\xB67\xB7"),
          peg$decode("<;u.# &;t=.\" 7\xB8"),
          peg$decode("%2H\"\"6H7I/q#$%%<;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#0B*%%<;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%2\xB9\"\"6\xB97\xBA/\x8C#$%%<2\xBB\"\"6\xBB7\xBC=.##&&!&'#/,#;H/#$+\")(\"'#&'#0H*%%<2\xBB\"\"6\xBB7\xBC=.##&&!&'#/,#;H/#$+\")(\"'#&'#&/2$2\xBB\"\"6\xBB7\xBC/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2\xB9\"\"6\xB97\xBA/\x98#$%%<2\xBB\"\"6\xBB7\xBC.# &;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#0N*%%<2\xBB\"\"6\xBB7\xBC.# &;p=.##&&!&'#/,#;H/#$+\")(\"'#&'#&/2$2\xBB\"\"6\xBB7\xBC/#$+#)(#'#(\"'#&'#"),
          peg$decode("%$;r.# &;s0)*;r.# &;s&/\xA5#$%$;q/&#0#*;q&&&#/E#$;r.# &;s/,#0)*;r.# &;s&&&#/#$+\")(\"'#&'#0\\*%$;q/&#0#*;q&&&#/E#$;r.# &;s/,#0)*;r.# &;s&&&#/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("$%$;r.# &;s0)*;r.# &;s&/,#;q/#$+\")(\"'#&'#/L#0I*%$;r.# &;s0)*;r.# &;s&/,#;q/#$+\")(\"'#&'#&&&#"),
          peg$decode("$;r.) &;q.# &;s0/*;r.) &;q.# &;s&")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    // end of script for parser generation

    // this is the module created during parsing
    var module = new ftl.Module('')

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return module;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})();
