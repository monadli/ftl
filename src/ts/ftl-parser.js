import fs from 'fs'
import path from 'path'
import ftl from './ftl-core'
import ftl_builder from './ftl-builder'

let ftl_parser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function extractOptional(optional, index) {
    return optional ? optional[index] : null;
  }

  function extractList(list, index) {
    var result = new Array(list.length);

    for (var i = 0; i < list.length; i++) {
      result[i] = list[i][index];
    }

    return result;
  }

  function buildList(first, rest, index) {
    return [first].concat(extractList(rest, index));
  }

  function buildFirstRest(first, rest) {
    return (Array.isArray(rest) && rest.length == 0) ? first : buildList(first, rest, 1)
  }

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(ftlFile, rootPath, module, options) {
    options = options !== void 0 ? options : {};

    let scriptPath = path.dirname(ftlFile)
    let input = fs.readFileSync(`${rootPath}/${ftlFile}.ftl`, 'utf-8')

    var peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(program) {

              //# Start

              return program;
            },
          function() { return text() },
          function(module_name) {

              //# ModuleDeclaration

              module.name = module_name;
              ftl.addModule(module);
            },
          ".",
          peg$literalExpectation(".", false),
          "/",
          peg$literalExpectation("/", false),
          function() {

              //# ModulePath

              return text();
            },
          function() {

              //# ImportModulePath

              return text();
            },
          function(first, rest) {

              //# Declarations

              return buildList(first, rest, 1);
            },
          function(importItems) {

              //# ImportDeclaration

              try {
                module.importStatement(scriptPath, importItems)
              } catch (e) {
                if (e instanceof ftl.ModuleNotLoadedError) {
                  let m = peg$parse(e.moduleName, rootPath, module, options)
                  m.name = e.moduleName
                  ftl.addModule(m)
                  module.importStatement(scriptPath, importItems)
                }
                else
                  throw e
              }
            },
          " ",
          peg$literalExpectation(" ", false),
          "as",
          peg$literalExpectation("as", false),
          function(name, as) {

              //# ImportSingleItem

              return {
                type: "single",
                name: name,
                asName: extractOptional(as, 3)
              };
            },
          ",",
          peg$literalExpectation(",", false),
          function(first, rest) {

              //# ImportMultiItems

              var ret = extractList(rest, 3);
              ret.unshift(first);
              return ret;
            },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(path, list) {

              //# ImportList

              return {
                type: "list",
                path: path,
                importList: list
              }
            },
          "=",
          peg$literalExpectation("=", false),
          function(modifier, id, expr) {

              //# VariableDeclaration
              var ret = modifier =='const' ? new ftl.ImmutableValFn(id.name, expr) : new ftl.VarFn(id.name, expr)
              module.addFn(ret); 
              return ret
            },
          function(id, params, body) {

              //# FunctionDeclaration

              module.addFn(new ftl_builder.FunctionBuilder(id, params, body).build(module, new ftl.TupleFn()));
            },
          "(",
          peg$literalExpectation("(", false),
          ")",
          peg$literalExpectation(")", false),
          function(elms) {

            //# Tuple

            return elms == null ? new ftl_builder.TupleBuilder() : new ftl_builder.TupleBuilder(... elms)
          },
          function(expr, params) {

              //# ExpressionCurry

              return new ftl_builder.ExprCurryBuilder(expr, ... extractList(params, 1))
            },
          function(first, rest) {

              //# ParameterList
              var list = buildList(first, rest, 3);
              for (var i = 0; i < list.length; i++) {
                if (list[i] instanceof ftl.RefFn) {
                  list[i].tupleSeq = '_' + i;
                }
              }
              return list;
             },
          ":",
          peg$literalExpectation(":", false),
          function(id, expr) {

              //# Parameter
              return new ftl_builder.TupleElementBuilder(extractOptional(id, 0), expr)
          },
              "->",
          peg$literalExpectation("->", false),
          function(ex) {

              //# PipeExpression

              return ex
            },
          function(first, rest) {

              //# Expression
              var t = extractOptional(rest, 1);
              if (t == null)
                return first;
              
              return new ftl_builder.PipeBuilder(first, t)
            },
          function(expr) {

                //# Executable

                let exec = expr.build(module);
                module.addExecutable(exec);
                return exec;
              },
          "//",
          peg$literalExpectation("//", false),
          function(first, rest) {

              //# Operator

              return text();
            },
          function(id) {

              //# OperandValueDeclaration

              return id;
            },
          function(id, params) {

              // #OperandFunctionDeclaration
              return new ftl_builder.FunctionInterfaceBuilder(id.name, new ftl_builder.ParamTupleBuilder(... params.fns))
            },
          function(first, rest) {

              //# PreInfixOperatorDeclaration

              var ops = extractList(rest, 1);
              var name = ops.length == 1 ? ops[0] : ops.join(' ');
              var operands = [first].concat(extractList(rest, 3))
              return {
                type: 'OperatorDeclaration',
                name: name,
                operands: new ftl_builder.TupleBuilder(... operands)
              }
            },
          function(operand, op) {

              //# PostfixOperatorDeclaration

              return {
                type: 'PostfixOperatorDeclaration',
                name: op,
                operands: operand
              }
            },
          function(op, expr) {

              //# UnaryOperatorExpression

              // negative number
              if (op == '-' && expr instanceof ftl_builder.ConstBuilder)
                return new ftl_builder.ConstBuilder(-expr.val);

              return new ftl_builder.PipeBuilder(expr, module.getAvailableFn(' ' + (op.name || op)))
            },
          function(expr, op) {

              //# PostfixOperatorExpression

              return new ftl_builder.PipeBuilder(expr, module.getAvailableFn(op) || new ftl_builder.RefBuilder(op))
            },
          function(operand, rest) {

              // N_aryOperatorExpression

              var ops = extractList(rest, 1);
              var params = [operand].concat(extractList(rest, 3));
              return new ftl_builder.N_aryOperatorExpressionBuilder(ops, params)
            },
          "_",
          peg$literalExpectation("_", false),
          "0",
          peg$literalExpectation("0", false),
          function() {

              //# TupleSelector

              return new ftl.TupleSelectorFn(text().substring(1));
            },
          function(id) {return text()},
          function(id, index) {

              //# ArrayElementSelector
              return new ftl_builder.ArrayElementSelectorBuilder(id, index)
            },
          function(elms) {

              //# ArrayLiteral

              var lst = extractOptional(elms, 1);
              return lst == null ? new ftl_builder.ConstBuilder([]) : lst
            },
          function(first, rest) {

              //# LiteralList

              var elms = buildList(first, rest, 3);
              var ret = [];
              for (var i = 0; i < elms.length; i++)
              ret.push(elms[i].build(module).apply());
              return new ftl_builder.ConstBuilder(ret)
            },
          function(id, params) {

              //# CallExpression

              var extracted_params = extractList(params, 1);

              // lambda declaration
              if (id.name == '$') {
                if (extracted_params.length > 1)
                  throw new Error("FTL0001: lambda's arguments followed by calling arguments!");
                return new ftl_builder.ParamTupleBuilder(... extracted_params[0].fns)
              }

              return new ftl_builder.CallExprBuilder(id.name, extracted_params);
            },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function() {return text()},
          function() {return {type:'native', script: text()}},
          peg$anyExpectation(),
          function(name) {

              //# Identifier
              return new ftl_builder.RefBuilder(name)
            },
          peg$otherExpectation("identifier"),
          function(first, rest) {

              //# IdentifierName

              return first + rest.join("");
            },
          "$",
          peg$literalExpectation("$", false),
          function() {

              //# NamespaceIdentifier
              return text();
            },
          "false",
          peg$literalExpectation("false", false),
          "fn",
          peg$literalExpectation("fn", false),
          "null",
          peg$literalExpectation("null", false),
          "true",
          peg$literalExpectation("true", false),
          "module",
          peg$literalExpectation("module", false),
          "import",
          peg$literalExpectation("import", false),
          "var",
          peg$literalExpectation("var", false),
          "const",
          peg$literalExpectation("const", false),
          /^[A-Z]/,
          peg$classExpectation([["A", "Z"]], false, false),
          /^[a-z]/,
          peg$classExpectation([["a", "z"]], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          /^[!%&*+\-.\/:<=>?\^|\xD7\xF7\u220F\u2211\u2215\u2217\u2219\u221A\u221B\u221C\u2227\u2228\u2229\u222A\u223C\u2264\u2265\u2282\u2283]/,
          peg$classExpectation(["!", "%", "&", "*", "+", "-", ".", "/", ":", "<", "=", ">", "?", "^", "|", "\xD7", "\xF7", "\u220F", "\u2211", "\u2215", "\u2217", "\u2219", "\u221A", "\u221B", "\u221C", "\u2227", "\u2228", "\u2229", "\u222A", "\u223C", "\u2264", "\u2265", "\u2282", "\u2283"], false, false),
          function() {

            //# TrueToken
            return new ftl_builder.ConstBuilder(true)
          },
          function() {

            //# FalseToken
            return new ftl_builder.ConstBuilder(false)
          },
          function(literal) {

            //# NumericLiteral
            return literal
          },
          function() {
            // DecimalLiteral
            return new ftl_builder.ConstBuilder(parseFloat(text()))
          },
          /^[\-]/,
          peg$classExpectation(["-"], false, false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          "e",
          peg$literalExpectation("e", true),
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          "0x",
          peg$literalExpectation("0x", true),
          /^[0-9a-f]/i,
          peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
          "\"",
          peg$literalExpectation("\"", false),
          function(chars) {

            //# StringLiteral
            var str = text();
            return new ftl_builder.ConstBuilder(str.substr(1, str.length - 2))
          },
          "'",
          peg$literalExpectation("'", false),
          "\\",
          peg$literalExpectation("\\", false),
          "b",
          peg$literalExpectation("b", false),
          "f",
          peg$literalExpectation("f", false),
          "n",
          peg$literalExpectation("n", false),
          "r",
          peg$literalExpectation("r", false),
          "t",
          peg$literalExpectation("t", false),
          "v",
          peg$literalExpectation("v", false),
          "x",
          peg$literalExpectation("x", false),
          "u",
          peg$literalExpectation("u", false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "\n",
          peg$literalExpectation("\n", false),
          "\r\n",
          peg$literalExpectation("\r\n", false),
          "\r",
          peg$literalExpectation("\r", false),
          "\t",
          peg$literalExpectation("\t", false),
          "\x0B",
          peg$literalExpectation("\x0B", false),
          "\f",
          peg$literalExpectation("\f", false),
          "\xA0",
          peg$literalExpectation("\xA0", false),
          peg$otherExpectation("comment"),
          "/*",
          peg$literalExpectation("/*", false),
          "*/",
          peg$literalExpectation("*/", false)
        ],

        peg$bytecode = [
          peg$decode("%;z/V#;!.\" &\"/H$;z/?$;$.\" &\"/1$;z/($8%: %!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;S/Q#;x/H$%;\"/0#;N/'$8\":!\" )(\"'#&'#/($8#:\"#! )(#'#(\"'#&'#"),
          peg$decode("%$%;N/>#2#\"\"6#7$.) &2%\"\"6%7&/#$+\")(\"'#&'#0H*%;N/>#2#\"\"6#7$.) &2%\"\"6%7&/#$+\")(\"'#&'#&/& 8!:'! )"),
          peg$decode("%$%$2#\"\"6#7$/,#0)*2#\"\"6#7$&&&#/2#2%\"\"6%7&/#$+\")(\"'#&'#0U*%$2#\"\"6#7$/,#0)*2#\"\"6#7$&&&#/2#2%\"\"6%7&/#$+\")(\"'#&'#&/0#;\"/'$8\":(\" )(\"'#&'#"),
          peg$decode("%;%/_#$%;y/,#;%/#$+\")(\"'#&'#06*%;y/,#;%/#$+\")(\"'#&'#&/)$8\":)\"\"! )(\"'#&'#"),
          peg$decode(";&./ &;+.) &;,.# &;4"),
          peg$decode("%;T/:#;x/1$;(/($8#:*#! )(#'#(\"'#&'#"),
          peg$decode("%%;#/\x82#;J.o &%;6/e#$%2+\"\"6+7,/,#;6/#$+\")(\"'#&'#0<*%2+\"\"6+7,/,#;6/#$+\")(\"'#&'#&/#$+\")(\"'#&'#/'$8\":!\" )(\"'#&'#/h#%;x/J#2-\"\"6-7./;$;x/2$;J.# &;6/#$+$)($'#(#'#(\"'#&'#.\" &\"/)$8\":/\"\"! )(\"'#&'#"),
          peg$decode("%;*/\x8F#$%;x/D#20\"\"6071/5$;x/,$;*/#$+$)($'#(#'#(\"'#&'#0N*%;x/D#20\"\"6071/5$;x/,$;*/#$+$)($'#(#'#(\"'#&'#&/)$8\":2\"\"! )(\"'#&'#"),
          peg$decode("%%;#/0#;N/'$8\":!\" )(\"'#&'#/p#;x/g$23\"\"6374/X$;x/O$;(.\" &\"/A$;x/8$25\"\"6576/)$8':7'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";).# &;'"),
          peg$decode("%;V.# &;U/f#;x/]$;J/T$;x/K$28\"\"6879/<$;x/3$;5/*$8'::'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;P/q#;x/h$;:.) &;J.# &;6/S$;x/J$;-.\" &\"/<$;x/3$;1/*$8':;'#$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2<\"\"6<7=/W#;x/N$;/.\" &\"/@$;x/7$2>\"\"6>7?/($8%:@%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;-/e#$%;x/,#;-/#$+\")(\"'#&'#/9#06*%;x/,#;-/#$+\")(\"'#&'#&&&#/)$8\":A\"\"! )(\"'#&'#"),
          peg$decode("%;0/\x8F#$%;x/D#20\"\"6071/5$;x/,$;0/#$+$)($'#(#'#(\"'#&'#0N*%;x/D#20\"\"6071/5$;x/,$;0/#$+$)($'#(#'#(\"'#&'#&/)$8\":B\"\"! )(\"'#&'#"),
          peg$decode("%%;J/;#;x/2$2C\"\"6C7D/#$+#)(#'#(\"'#&'#.\" &\"/;#;x/2$;3/)$8#:E#\"\" )(#'#(\"'#&'#"),
          peg$decode(";H.# &;2"),
          peg$decode("%2F\"\"6F7G/C#;x/:$;3/1$;x/($8$:H$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;=.# &;5/J#%;x/,#;2/#$+\")(\"'#&'#.\" &\"/)$8\":I\"\"! )(\"'#&'#"),
          peg$decode("%;3/' 8!:J!! )"),
          peg$decode(";B.M &;G.G &;F.A &;J.; &;C.5 &;D./ &;..) &;-.# &;A"),
          peg$decode("%%<2K\"\"6K7L=.##&&!&'#/]#%<2F\"\"6F7G=.##&&!&'#/B$;[/9$$;[0#*;[&/)$8$:M$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;J/' 8!:N!! )"),
          peg$decode("%;J/2#;-/)$8\":O\"\"! )(\"'#&'#"),
          peg$decode(";8.# &;7"),
          peg$decode(";;.# &;<"),
          peg$decode("%;9/\x89#$%;x/>#;6/5$;x/,$;9/#$+$)($'#(#'#(\"'#&'#/K#0H*%;x/>#;6/5$;x/,$;9/#$+$)($'#(#'#(\"'#&'#&&&#/)$8\":P\"\"! )(\"'#&'#"),
          peg$decode("%;9/;#;x/2$;6/)$8#:Q#\"\" )(#'#(\"'#&'#"),
          peg$decode(";>.) &;@.# &;?"),
          peg$decode("%;6/;#;x/2$;5/)$8#:R#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;5/;#;x/2$;6/)$8#:S#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;5/\x89#$%;x/>#;6/5$;x/,$;5/#$+$)($'#(#'#(\"'#&'#/K#0H*%;x/>#;6/5$;x/,$;5/#$+$)($'#(#'#(\"'#&'#&&&#/)$8\":T\"\"! )(\"'#&'#"),
          peg$decode("%2U\"\"6U7V/k#2W\"\"6W7X.R &%;a/H#$;Z0#*;Z&/8$%<;L=.##&&!&'#/#$+#)(#'#(\"'#&'#/'$8\":Y\" )(\"'#&'#"),
          peg$decode("%;J/\x93#;x/\x8A$23\"\"6374/{$2W\"\"6W7X.H &%;a/8#$;Z0#*;Z&/($8\":Z\"!%)(\"'#&'#.# &;J/A$;x/8$25\"\"6576/)$8&:[&\"%\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";Q./ &;].) &;^.# &;g"),
          peg$decode("%23\"\"6374/a#%;x/,#;E/#$+\")(\"'#&'#.\" &\"/@$;x/7$25\"\"6576/($8$:\\$!\")($'#(#'#(\"'#&'#"),
          peg$decode("%;5/\x8F#$%;x/D#20\"\"6071/5$;x/,$;5/#$+$)($'#(#'#(\"'#&'#0N*%;x/D#20\"\"6071/5$;x/,$;5/#$+$)($'#(#'#(\"'#&'#&/)$8\":]\"\"! )(\"'#&'#"),
          peg$decode("%;J/r#;x/i$23\"\"6374/Z$;x/Q$$;//&#0#*;/&&&#/;$;x/2$25\"\"6576/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;J/e#$%;x/,#;-/#$+\")(\"'#&'#/9#06*%;x/,#;-/#$+\")(\"'#&'#&&&#/)$8\":^\"\"! )(\"'#&'#"),
          peg$decode("%2_\"\"6_7`/\u0152#;x/\u0149$%$%%<2_\"\"6_7`.) &2a\"\"6a7b=.##&&!&'#/,#;I/#$+\")(\"'#&'#0T*%%<2_\"\"6_7`.) &2a\"\"6a7b=.##&&!&'#/,#;I/#$+\")(\"'#&'#&/& 8!:c! )/\xCC$$;H0#*;H&/\xBC$;x/\xB3$%$%%<2_\"\"6_7`.) &2a\"\"6a7b=.##&&!&'#/,#;I/#$+\")(\"'#&'#0T*%%<2_\"\"6_7`.) &2a\"\"6a7b=.##&&!&'#/,#;I/#$+\")(\"'#&'#&/& 8!:c! )/6$2a\"\"6a7b/'$8':d' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("1\"\"5!7e"),
          peg$decode("%%<;\\=.##&&!&'#/1#;K/($8\":f\"! )(\"'#&'#"),
          peg$decode("<%;L/9#$;M0#*;M&/)$8\":h\"\"! )(\"'#&'#=.\" 7g"),
          peg$decode(";W.5 &2i\"\"6i7j.) &2U\"\"6U7V"),
          peg$decode(";L.# &;Z"),
          peg$decode("%;Y/O#$;Y.) &2U\"\"6U7V0/*;Y.) &2U\"\"6U7V&/'$8\":k\" )(\"'#&'#"),
          peg$decode("%2l\"\"6l7m/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2n\"\"6n7o/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2p\"\"6p7q/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2r\"\"6r7s/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2t\"\"6t7u/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2v\"\"6v7w/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2x\"\"6x7y/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2z\"\"6z7{/8#%<;M=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";X.# &;Y"),
          peg$decode("4|\"\"5!7}"),
          peg$decode("4~\"\"5!7\x7F"),
          peg$decode("4\x80\"\"5!7\x81"),
          peg$decode("4\x82\"\"5!7\x83"),
          peg$decode(";U.A &;V.; &;P.5 &;S./ &;T.) &;Q.# &;]"),
          peg$decode("%;R/& 8!:\x84! ).. &%;O/& 8!:\x85! )"),
          peg$decode("%;e/>#%<;L.# &;Z=.##&&!&'#/#$+\")(\"'#&'#.M &%;_/C#%<;L.# &;Z=.##&&!&'#/($8\":\x86\"!!)(\"'#&'#"),
          peg$decode("%;`/T#2#\"\"6#7$/E$$;Z0#*;Z&/5$;b.\" &\"/'$8$:\x87$ )($'#(#'#(\"'#&'#.\x91 &%4\x88\"\"5!7\x89.\" &\"/Z#2#\"\"6#7$/K$$;Z/&#0#*;Z&&&#/5$;b.\" &\"/'$8$:\x87$ )($'#(#'#(\"'#&'#.? &%;`/5#;b.\" &\"/'$8\":\x87\" )(\"'#&'#"),
          peg$decode("2W\"\"6W7X.Q &%4\x88\"\"5!7\x89.\" &\"/<#;a/3$$;Z0#*;Z&/#$+#)(#'#(\"'#&'#"),
          peg$decode("4\x8A\"\"5!7\x8B"),
          peg$decode("%;c/,#;d/#$+\")(\"'#&'#"),
          peg$decode("3\x8C\"\"5!7\x8D"),
          peg$decode("%4\x8E\"\"5!7\x8F.\" &\"/9#$;Z/&#0#*;Z&&&#/#$+\")(\"'#&'#"),
          peg$decode("%3\x90\"\"5\"7\x91/@#%$;f/&#0#*;f&&&#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\x92\"\"5!7\x93"),
          peg$decode("%2\x94\"\"6\x947\x95/G#$;h0#*;h&/7$2\x94\"\"6\x947\x95/($8#:\x96#!!)(#'#(\"'#&'#.W &%2\x97\"\"6\x977\x98/G#$;i0#*;i&/7$2\x97\"\"6\x977\x98/($8#:\x96#!!)(#'#(\"'#&'#"),
          peg$decode("%%<2\x94\"\"6\x947\x95./ &2\x99\"\"6\x997\x9A.# &;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#.B &%2\x99\"\"6\x997\x9A/,#;k/#$+\")(\"'#&'#.# &;j"),
          peg$decode("%%<2\x97\"\"6\x977\x98./ &2\x99\"\"6\x997\x9A.# &;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#.B &%2\x99\"\"6\x997\x9A/,#;k/#$+\")(\"'#&'#.# &;j"),
          peg$decode("%2\x99\"\"6\x997\x9A/,#;r/#$+\")(\"'#&'#"),
          peg$decode(";l.N &%2W\"\"6W7X/8#%<;Z=.##&&!&'#/#$+\")(\"'#&'#.# &;p"),
          peg$decode(";m.# &;n"),
          peg$decode("2\x97\"\"6\x977\x98.} &2\x94\"\"6\x947\x95.q &2\x99\"\"6\x997\x9A.e &2\x9B\"\"6\x9B7\x9C.Y &2\x9D\"\"6\x9D7\x9E.M &2\x9F\"\"6\x9F7\xA0.A &2\xA1\"\"6\xA17\xA2.5 &2\xA3\"\"6\xA37\xA4.) &2\xA5\"\"6\xA57\xA6"),
          peg$decode("%%<;o.# &;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#"),
          peg$decode(";m.; &;Z.5 &2\xA7\"\"6\xA77\xA8.) &2\xA9\"\"6\xA97\xAA"),
          peg$decode("%2\xA7\"\"6\xA77\xA8/F#%%;f/,#;f/#$+\")(\"'#&'#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\xAB\"\"5!7\xAC"),
          peg$decode("2\xAD\"\"6\xAD7\xAE.5 &2\xAF\"\"6\xAF7\xB0.) &2\xB1\"\"6\xB17\xB2"),
          peg$decode("2\xB3\"\"6\xB37\xB4.M &2\xB5\"\"6\xB57\xB6.A &2\xB7\"\"6\xB77\xB8.5 &2+\"\"6+7,.) &2\xB9\"\"6\xB97\xBA"),
          peg$decode("<;v.# &;u=.\" 7\xBB"),
          peg$decode("%2K\"\"6K7L/q#$%%<;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#0B*%%<;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%2\xBC\"\"6\xBC7\xBD/\x8C#$%%<2\xBE\"\"6\xBE7\xBF=.##&&!&'#/,#;I/#$+\")(\"'#&'#0H*%%<2\xBE\"\"6\xBE7\xBF=.##&&!&'#/,#;I/#$+\")(\"'#&'#&/2$2\xBE\"\"6\xBE7\xBF/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2\xBC\"\"6\xBC7\xBD/\x98#$%%<2\xBE\"\"6\xBE7\xBF.# &;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#0N*%%<2\xBE\"\"6\xBE7\xBF.# &;q=.##&&!&'#/,#;I/#$+\")(\"'#&'#&/2$2\xBE\"\"6\xBE7\xBF/#$+#)(#'#(\"'#&'#"),
          peg$decode("%$;s.# &;t0)*;s.# &;t&/\xA5#$%$;r/&#0#*;r&&&#/E#$;s.# &;t/,#0)*;s.# &;t&&&#/#$+\")(\"'#&'#0\\*%$;r/&#0#*;r&&&#/E#$;s.# &;t/,#0)*;s.# &;t&&&#/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("$%$;s.# &;t0)*;s.# &;t&/,#;r/#$+\")(\"'#&'#/L#0I*%$;s.# &;t0)*;s.# &;t&/,#;r/#$+\")(\"'#&'#&&&#"),
          peg$decode("$;s.) &;r.# &;t0/*;s.) &;r.# &;t&")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    // end of script for parser generation

        // this is the module created during 
        if (!module) {
          module = new ftl.Module('')
        }
   
    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {

      // modified from parser generation
      return module;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

// added after parser generation
export default ftl_parser