let ftl_parser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(application) {
                return application
            },
          function(module_name) {
              return buildElement('ModuleDeclaration', { name: module_name.text() })
            },
          ".",
          peg$literalExpectation(".", false),
          "/",
          peg$literalExpectation("/", false),
          function() {
              return buildElement('ModulePath', text())
            },
          function() {
              return buildElement('ImportModulePath', { path: text() })
            },
          function(first, rest) {
              return buildElement('Declarations', {declarations: buildList(first, rest, 1)})
            },
          function(items) {
              return buildElement('ImportDeclaration', { items: items })
            },
          " ",
          peg$literalExpectation(" ", false),
          "as",
          peg$literalExpectation("as", false),
          function(name, as) {
              return buildElement('ImportSingleItem', { name: name.text(), item: extractOptional(as, 3) })
            },
          ",",
          peg$literalExpectation(",", false),
          function(first, rest) {
              return buildElement('ImportMultiItems', { items: buildList(first, rest, 3) })
            },
          function() { return text() },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(path, list) {
              return buildElement('ImportList', { path: path, list: list })
            },
          "=",
          peg$literalExpectation("=", false),
          function(modifier, id, expr) {
              return buildElement('VariableDeclaration', { modifier: modifier, name: id, expr: expr })
            },
          function(id, params) {
              return buildElement(
                'FunctionSignature',
                {
                  name:id,
                  params:params
                }
              )
            },
          function(signature, body) {
              return buildElement('FunctionDeclaration', {
                signature: signature,
                body: body
              })
            },
          "(",
          peg$literalExpectation("(", false),
          ")",
          peg$literalExpectation(")", false),
          function(elms) {
              return buildElement('Tuple', {elements: optionalList(elms)})
            },
          function(expr, params) {
              return buildElement(
                'ExpressionCurry',
                {
                  expr:expr,
                  list: extractList(params, 1)
                }
              )
            },
          function(first, rest) {
              return buildList(first, rest, 3)
            },
          ":",
          peg$literalExpectation(":", false),
          function(id, expr) {
              return buildElement(
                'TupleElement',
                {
                  name: extractOptional(id, 0),
                  expr: expr
                }
              )
            },
          function(annotations, expr) {
              return buildElement(
                'MapOperand',
                {
                    annotations: extractList(annotations, 0),
                    expr: expr
                }
              )
            },
          "->",
          peg$literalExpectation("->", false),
          function(ex) {
              //# ArrowExpression
              return ex
            },
          function(first, rest) {
              return buildElement(
                'MapExpression',
                {
                  elements: buildList(first, rest, 1)
                }
              )
            },
          function(executable) {
              return buildElement('Executable', {
                executable: executable
              });
            },
          "@",
          peg$literalExpectation("@", false),
          function(annotation) {
              console.log('in annotation')
              return annotation
            },
          "//",
          peg$literalExpectation("//", false),
          function(first, rest) {

              //# Operator

              return text();
            },
          function(id) {

              //# OperandValueDeclaration

              return id;
            },
          function(id, params) {
              return buildElement(
                'OperandFunctionDeclaration',
                {
                  name: id.name,
                  params: params
                }
              )
            },
          function(op, operand) {
              return buildElement(
                'PrefixOperatorDeclaration',
                {
                  operator: op,
                  operand: operand
                }
              )
            },
          function(first, rest) {
              return buildElement(
                'InfixOperatorDeclaration',
                {
                  operators: extractList(rest, 1),
                  operands: buildList(first, rest, 3)
                }
              )
            },
          function(operand, op) {
              return buildElement(
                'PostfixOperatorDeclaration',
                {
                  operator: op,
                  operand: operand
                }
              )
            },
          function(unit) {
              return buildElement('OperatorExpression', { unit: unit })
            },
          function(op, expr) {
              return buildElement('PrefixOperatorExpression', { operator: op, expr: expr})
            },
          function(expr, op) {
              return buildElement('PostfixOperatorExpression', { operator: op, expr: expr })
            },
          function(first, rest, last) {
              var params = buildList(first, rest, 3);
              if (last) {
                let post_op = extractOptional(last, 1)
                params[params.length - 1] = buildElement('PostfixOperatorExpression', { operator: post_op, expr: params[params.length - 1] })
              }
              return buildElement('N_aryOperatorExpression', { ops: extractList(rest, 1), operands: params })      
            },
          "_",
          peg$literalExpectation("_", false),
          "0",
          peg$literalExpectation("0", false),
          function() {
              return buildElement('TupleSelector', { selector: text().substring(1) })
            },
          function(id) {return text()},
          function(id, index) {
              return buildElement('ArrayElementSelector', { id: id, index: index })
            },
          function(elms) {
              return buildElement('ArrayLiteral', { list: extractOptional(elms, 1) })
            },
          function(first, rest) {
              return buildElement('LiteralList', { list: buildList(first, rest, 3) })
            },
          function(id, params) {
              var extracted_params = extractList(params, 1)

              // lambda declaration
              if (id.name == '$') {
                if (extracted_params.length > 1)
                  throw new Error("FTL0001: lambda's arguments followed by calling arguments!");
                return buildElement('ParamTupleBuilder', { params:extracted_params[0] })
              }

              return buildElement('CallExpression', { name: id, params: extracted_params })
            },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function() {return text()},
          function() {

              //# NativeBlock
              return {type:'native', script: text()}
            },
          peg$anyExpectation(),
          function(name) {
              return buildElement('Identifier', { name: name })
            },
          peg$otherExpectation("identifier"),
          function(first, rest) {
              return first + rest.join("")
            },
          "$",
          peg$literalExpectation("$", false),
          function() {
              return buildElement('NamespaceIdentifier', { text: text() })
            },
          "false",
          peg$literalExpectation("false", false),
          "fn",
          peg$literalExpectation("fn", false),
          "null",
          peg$literalExpectation("null", false),
          "true",
          peg$literalExpectation("true", false),
          "module",
          peg$literalExpectation("module", false),
          "import",
          peg$literalExpectation("import", false),
          "var",
          peg$literalExpectation("var", false),
          "const",
          peg$literalExpectation("const", false),
          /^[A-Z]/,
          peg$classExpectation([["A", "Z"]], false, false),
          /^[a-z]/,
          peg$classExpectation([["a", "z"]], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          /^[!%&*+\-.\/:<=>?\^|\xD7\xF7\u220F\u2211\u2215\u2217\u2219\u221A\u221B\u221C\u2227\u2228\u2229\u222A\u223C\u2264\u2265\u2282\u2283]/,
          peg$classExpectation(["!", "%", "&", "*", "+", "-", ".", "/", ":", "<", "=", ">", "?", "^", "|", "\xD7", "\xF7", "\u220F", "\u2211", "\u2215", "\u2217", "\u2219", "\u221A", "\u221B", "\u221C", "\u2227", "\u2228", "\u2229", "\u222A", "\u223C", "\u2264", "\u2265", "\u2282", "\u2283"], false, false),
          function() {
              return buildElement('TrueToken', { value: true })
            },
          function() {
              return buildElement('FalseToken', { value: false })
            },
          function(literal) { return buildElement('NumericLiteral', { value: literal }) },
          function() { return parseFloat(text()) },
          /^[\-]/,
          peg$classExpectation(["-"], false, false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          "e",
          peg$literalExpectation("e", true),
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          "0x",
          peg$literalExpectation("0x", true),
          /^[0-9a-f]/i,
          peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
          "\"",
          peg$literalExpectation("\"", false),
          function(chars) {
              let str = text()
              return buildElement('StringLiteral', { value: str.substr(1, str.length - 2) })
            },
          "'",
          peg$literalExpectation("'", false),
          "\\",
          peg$literalExpectation("\\", false),
          "b",
          peg$literalExpectation("b", false),
          "f",
          peg$literalExpectation("f", false),
          "n",
          peg$literalExpectation("n", false),
          "r",
          peg$literalExpectation("r", false),
          "t",
          peg$literalExpectation("t", false),
          "v",
          peg$literalExpectation("v", false),
          "x",
          peg$literalExpectation("x", false),
          "u",
          peg$literalExpectation("u", false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "\n",
          peg$literalExpectation("\n", false),
          "\r\n",
          peg$literalExpectation("\r\n", false),
          "\r",
          peg$literalExpectation("\r", false),
          "\t",
          peg$literalExpectation("\t", false),
          "\x0B",
          peg$literalExpectation("\x0B", false),
          "\f",
          peg$literalExpectation("\f", false),
          "\xA0",
          peg$literalExpectation("\xA0", false),
          peg$otherExpectation("comment"),
          "/*",
          peg$literalExpectation("/*", false),
          "*/",
          peg$literalExpectation("*/", false)
        ],

        peg$bytecode = [
          peg$decode("%;\x7F/V#;!.\" &\"/H$;\x7F/?$;$.\" &\"/1$;\x7F/($8%: %!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;X/M#;}/D$%;\"/,#;S/#$+\")(\"'#&'#/($8#:!#! )(#'#(\"'#&'#"),
          peg$decode("%$%;S/>#2\"\"\"6\"7#.) &2$\"\"6$7%/#$+\")(\"'#&'#0H*%;S/>#2\"\"\"6\"7#.) &2$\"\"6$7%/#$+\")(\"'#&'#&/& 8!:&! )"),
          peg$decode("%$%$2\"\"\"6\"7#/,#0)*2\"\"\"6\"7#&&&#/2#2$\"\"6$7%/#$+\")(\"'#&'#0U*%$2\"\"\"6\"7#/,#0)*2\"\"\"6\"7#&&&#/2#2$\"\"6$7%/#$+\")(\"'#&'#&/0#;\"/'$8\":'\" )(\"'#&'#"),
          peg$decode("%;%/_#$%;~/,#;%/#$+\")(\"'#&'#06*%;~/,#;%/#$+\")(\"'#&'#&/)$8\":(\"\"! )(\"'#&'#"),
          peg$decode(";&./ &;+.) &;-.# &;6"),
          peg$decode("%;Y/:#;}/1$;(/($8#:)#! )(#'#(\"'#&'#"),
          peg$decode("%%;#/~#;O.o &%;9/e#$%2*\"\"6*7+/,#;9/#$+\")(\"'#&'#0<*%2*\"\"6*7+/,#;9/#$+\")(\"'#&'#&/#$+\")(\"'#&'#/#$+\")(\"'#&'#/h#%;}/J#2,\"\"6,7-/;$;}/2$;O.# &;9/#$+$)($'#(#'#(\"'#&'#.\" &\"/)$8\":.\"\"! )(\"'#&'#"),
          peg$decode("%;*/\x8F#$%;}/D#2/\"\"6/70/5$;}/,$;*/#$+$)($'#(#'#(\"'#&'#0N*%;}/D#2/\"\"6/70/5$;}/,$;*/#$+$)($'#(#'#(\"'#&'#&/)$8\":1\"\"! )(\"'#&'#"),
          peg$decode("%%;#/0#;S/'$8\":2\" )(\"'#&'#/p#;}/g$23\"\"6374/X$;}/O$;(.\" &\"/A$;}/8$25\"\"6576/)$8':7'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";).# &;'"),
          peg$decode("%;[.# &;Z/f#;}/]$;O/T$;}/K$28\"\"6879/<$;}/3$;8/*$8'::'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;O/;#;}/2$;./)$8#:;#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;U/S#;}/J$;=.# &;,/;$;}/2$;2/)$8%:<%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2=\"\"6=7>/W#;}/N$;0.\" &\"/@$;}/7$2?\"\"6?7@/($8%:A%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;./e#$%;}/,#;./#$+\")(\"'#&'#/9#06*%;}/,#;./#$+\")(\"'#&'#&&&#/)$8\":B\"\"! )(\"'#&'#"),
          peg$decode("%;1/\x8F#$%;}/D#2/\"\"6/70/5$;}/,$;1/#$+$)($'#(#'#(\"'#&'#0N*%;}/D#2/\"\"6/70/5$;}/,$;1/#$+$)($'#(#'#(\"'#&'#&/)$8\":C\"\"! )(\"'#&'#"),
          peg$decode("%%;O/;#;}/2$2D\"\"6D7E/#$+#)(#'#(\"'#&'#.\" &\"/;#;}/2$;5/)$8#:F#\"\" )(#'#(\"'#&'#"),
          peg$decode(";M.0 &$;4/&#0#*;4&&&#"),
          peg$decode("%$%;7/,#;}/#$+\")(\"'#&'#06*%;7/,#;}/#$+\")(\"'#&'#&/8#;A.# &;8/)$8\":G\"\"! )(\"'#&'#"),
          peg$decode("%2H\"\"6H7I/:#;}/1$;3/($8#:J#! )(#'#(\"'#&'#"),
          peg$decode("%;3/_#$%;}/,#;4/#$+\")(\"'#&'#06*%;}/,#;4/#$+\")(\"'#&'#&/)$8\":K\"\"! )(\"'#&'#"),
          peg$decode("%;5/' 8!:L!! )"),
          peg$decode("%2M\"\"6M7N/7#;L.# &;O/($8\":O\"! )(\"'#&'#"),
          peg$decode(";H.S &;G.M &;L.G &;K.A &;O.; &;I.5 &;/./ &;..) &;F.# &;B"),
          peg$decode("%%<2P\"\"6P7Q=.##&&!&'#/]#%<2H\"\"6H7I=.##&&!&'#/B$;`/9$$;`0#*;`&/)$8$:R$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;O/' 8!:S!! )"),
          peg$decode("%;O/2#;./)$8\":T\"\"! )(\"'#&'#"),
          peg$decode(";;.# &;:"),
          peg$decode(";>.) &;?.# &;@"),
          peg$decode("%;9/;#;}/2$;</)$8#:U#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;</\x89#$%;}/>#;9/5$;}/,$;</#$+$)($'#(#'#(\"'#&'#/K#0H*%;}/>#;9/5$;}/,$;</#$+$)($'#(#'#(\"'#&'#&&&#/)$8\":V\"\"! )(\"'#&'#"),
          peg$decode("%;</;#;}/2$;9/)$8#:W#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;E.# &;C/' 8!:X!! )"),
          peg$decode("%;9/;#;}/2$;8/)$8#:Y#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;8/;#;}/2$;9/)$8#:Z#\"\" )(#'#(\"'#&'#"),
          peg$decode(";8.] &%2=\"\"6=7>/M#;}/D$;C/;$;}/2$2?\"\"6?7@/#$+%)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;D/\xAB#$%;}/>#;9/5$;}/,$;D/#$+$)($'#(#'#(\"'#&'#/K#0H*%;}/>#;9/5$;}/,$;D/#$+$)($'#(#'#(\"'#&'#&&&#/K$%;}/,#;9/#$+\")(\"'#&'#.\" &\"/*$8#:[##\"! )(#'#(\"'#&'#"),
          peg$decode("%2\\\"\"6\\7]/k#2^\"\"6^7_.R &%;f/H#$;_0#*;_&/8$%<;Q=.##&&!&'#/#$+#)(#'#(\"'#&'#/'$8\":`\" )(\"'#&'#"),
          peg$decode("%;O/\x93#;}/\x8A$23\"\"6374/{$2^\"\"6^7_.H &%;f/8#$;_0#*;_&/($8\":a\"!%)(\"'#&'#.# &;O/A$;}/8$25\"\"6576/)$8&:b&\"%\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";V./ &;b.) &;c.# &;l"),
          peg$decode("%23\"\"6374/a#%;}/,#;J/#$+\")(\"'#&'#.\" &\"/@$;}/7$25\"\"6576/($8$:c$!\")($'#(#'#(\"'#&'#"),
          peg$decode("%;8/\x8F#$%;}/D#2/\"\"6/70/5$;}/,$;8/#$+$)($'#(#'#(\"'#&'#0N*%;}/D#2/\"\"6/70/5$;}/,$;8/#$+$)($'#(#'#(\"'#&'#&/)$8\":d\"\"! )(\"'#&'#"),
          peg$decode("%;O/r#;}/i$23\"\"6374/Z$;}/Q$$;0/&#0#*;0&&&#/;$;}/2$25\"\"6576/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;O/e#$%;}/,#;./#$+\")(\"'#&'#/9#06*%;}/,#;./#$+\")(\"'#&'#&&&#/)$8\":e\"\"! )(\"'#&'#"),
          peg$decode("%2f\"\"6f7g/\u0152#;}/\u0149$%$%%<2f\"\"6f7g.) &2h\"\"6h7i=.##&&!&'#/,#;N/#$+\")(\"'#&'#0T*%%<2f\"\"6f7g.) &2h\"\"6h7i=.##&&!&'#/,#;N/#$+\")(\"'#&'#&/& 8!:j! )/\xCC$$;M0#*;M&/\xBC$;}/\xB3$%$%%<2f\"\"6f7g.) &2h\"\"6h7i=.##&&!&'#/,#;N/#$+\")(\"'#&'#0T*%%<2f\"\"6f7g.) &2h\"\"6h7i=.##&&!&'#/,#;N/#$+\")(\"'#&'#&/& 8!:j! )/6$2h\"\"6h7i/'$8':k' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("1\"\"5!7l"),
          peg$decode("%%<;a=.##&&!&'#/1#;P/($8\":m\"! )(\"'#&'#"),
          peg$decode("<%;Q/9#$;R0#*;R&/)$8\":o\"\"! )(\"'#&'#=.\" 7n"),
          peg$decode(";\\.5 &2p\"\"6p7q.) &2\\\"\"6\\7]"),
          peg$decode(";Q.# &;_"),
          peg$decode("%;^/O#$;^.) &2\\\"\"6\\7]0/*;^.) &2\\\"\"6\\7]&/'$8\":r\" )(\"'#&'#"),
          peg$decode("%2s\"\"6s7t/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2u\"\"6u7v/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2w\"\"6w7x/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2y\"\"6y7z/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2{\"\"6{7|/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2}\"\"6}7~/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2\x7F\"\"6\x7F7\x80/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("%2\x81\"\"6\x817\x82/8#%<;R=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";].# &;^"),
          peg$decode("4\x83\"\"5!7\x84"),
          peg$decode("4\x85\"\"5!7\x86"),
          peg$decode("4\x87\"\"5!7\x88"),
          peg$decode("4\x89\"\"5!7\x8A"),
          peg$decode(";Z.A &;[.; &;U.5 &;X./ &;Y.) &;V.# &;b"),
          peg$decode("%;W/& 8!:\x8B! ).. &%;T/& 8!:\x8C! )"),
          peg$decode("%;j/C#%<;Q.# &;_=.##&&!&'#/($8\":\x8D\"!!)(\"'#&'#.M &%;d/C#%<;Q.# &;_=.##&&!&'#/($8\":\x8D\"!!)(\"'#&'#"),
          peg$decode("%;e/T#2\"\"\"6\"7#/E$$;_0#*;_&/5$;g.\" &\"/'$8$:\x8E$ )($'#(#'#(\"'#&'#.\x91 &%4\x8F\"\"5!7\x90.\" &\"/Z#2\"\"\"6\"7#/K$$;_/&#0#*;_&&&#/5$;g.\" &\"/'$8$:\x8E$ )($'#(#'#(\"'#&'#.? &%;e/5#;g.\" &\"/'$8\":\x8E\" )(\"'#&'#"),
          peg$decode("2^\"\"6^7_.Q &%4\x8F\"\"5!7\x90.\" &\"/<#;f/3$$;_0#*;_&/#$+#)(#'#(\"'#&'#"),
          peg$decode("4\x91\"\"5!7\x92"),
          peg$decode("%;h/,#;i/#$+\")(\"'#&'#"),
          peg$decode("3\x93\"\"5!7\x94"),
          peg$decode("%4\x95\"\"5!7\x96.\" &\"/9#$;_/&#0#*;_&&&#/#$+\")(\"'#&'#"),
          peg$decode("%3\x97\"\"5\"7\x98/@#%$;k/&#0#*;k&&&#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\x99\"\"5!7\x9A"),
          peg$decode("%2\x9B\"\"6\x9B7\x9C/G#$;m0#*;m&/7$2\x9B\"\"6\x9B7\x9C/($8#:\x9D#!!)(#'#(\"'#&'#.W &%2\x9E\"\"6\x9E7\x9F/G#$;n0#*;n&/7$2\x9E\"\"6\x9E7\x9F/($8#:\x9D#!!)(#'#(\"'#&'#"),
          peg$decode("%%<2\x9B\"\"6\x9B7\x9C./ &2\xA0\"\"6\xA07\xA1.# &;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#.B &%2\xA0\"\"6\xA07\xA1/,#;p/#$+\")(\"'#&'#.# &;o"),
          peg$decode("%%<2\x9E\"\"6\x9E7\x9F./ &2\xA0\"\"6\xA07\xA1.# &;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#.B &%2\xA0\"\"6\xA07\xA1/,#;p/#$+\")(\"'#&'#.# &;o"),
          peg$decode("%2\xA0\"\"6\xA07\xA1/,#;w/#$+\")(\"'#&'#"),
          peg$decode(";q.N &%2^\"\"6^7_/8#%<;_=.##&&!&'#/#$+\")(\"'#&'#.# &;u"),
          peg$decode(";r.# &;s"),
          peg$decode("2\x9E\"\"6\x9E7\x9F.} &2\x9B\"\"6\x9B7\x9C.q &2\xA0\"\"6\xA07\xA1.e &2\xA2\"\"6\xA27\xA3.Y &2\xA4\"\"6\xA47\xA5.M &2\xA6\"\"6\xA67\xA7.A &2\xA8\"\"6\xA87\xA9.5 &2\xAA\"\"6\xAA7\xAB.) &2\xAC\"\"6\xAC7\xAD"),
          peg$decode("%%<;t.# &;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#"),
          peg$decode(";r.; &;_.5 &2\xAE\"\"6\xAE7\xAF.) &2\xB0\"\"6\xB07\xB1"),
          peg$decode("%2\xAE\"\"6\xAE7\xAF/F#%%;k/,#;k/#$+\")(\"'#&'#/\"!&,)/#$+\")(\"'#&'#"),
          peg$decode("4\xB2\"\"5!7\xB3"),
          peg$decode("2\xB4\"\"6\xB47\xB5.5 &2\xB6\"\"6\xB67\xB7.) &2\xB8\"\"6\xB87\xB9"),
          peg$decode("2\xBA\"\"6\xBA7\xBB.M &2\xBC\"\"6\xBC7\xBD.A &2\xBE\"\"6\xBE7\xBF.5 &2*\"\"6*7+.) &2\xC0\"\"6\xC07\xC1"),
          peg$decode("<;{.# &;z=.\" 7\xC2"),
          peg$decode("%2P\"\"6P7Q/q#$%%<;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#0B*%%<;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%2\xC3\"\"6\xC37\xC4/\x8C#$%%<2\xC5\"\"6\xC57\xC6=.##&&!&'#/,#;N/#$+\")(\"'#&'#0H*%%<2\xC5\"\"6\xC57\xC6=.##&&!&'#/,#;N/#$+\")(\"'#&'#&/2$2\xC5\"\"6\xC57\xC6/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2\xC3\"\"6\xC37\xC4/\x98#$%%<2\xC5\"\"6\xC57\xC6.# &;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#0N*%%<2\xC5\"\"6\xC57\xC6.# &;v=.##&&!&'#/,#;N/#$+\")(\"'#&'#&/2$2\xC5\"\"6\xC57\xC6/#$+#)(#'#(\"'#&'#"),
          peg$decode("%$;x.# &;y0)*;x.# &;y&/\xA5#$%$;w/&#0#*;w&&&#/E#$;x.# &;y/,#0)*;x.# &;y&&&#/#$+\")(\"'#&'#0\\*%$;w/&#0#*;w&&&#/E#$;x.# &;y/,#0)*;x.# &;y&&&#/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("$%$;x.# &;y0)*;x.# &;y&/,#;w/#$+\")(\"'#&'#/L#0I*%$;x.# &;y0)*;x.# &;y&/,#;w/#$+\")(\"'#&'#&&&#"),
          peg$decode("$;x.) &;w.# &;y0/*;x.) &;w.# &;y&")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 96 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }



    class BuildInfo {
        constructor(name, details) {
            this.name = name
            this.details = details
        }
    }

    function buildElement(name, buildInfo) {
      return new BuildInfo(name, buildInfo)
    }

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      var result = new Array(list.length);

      for (var i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }

    function buildList(first, rest, index) {
      return [first].concat(extractList(rest, index));
    }

    function optionalList(value) {
      return value || [];
    }

    function buildFirstRest(first, rest) {
      return (Array.isArray(rest) && rest.length == 0) ? first : buildList(first, rest, 1)
    }

    // end of script for parser generation


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

export default ftl_parser
